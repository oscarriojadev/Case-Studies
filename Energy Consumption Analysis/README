````markdown
# ⚡ Energy Consumption Analysis with ARIMA

![Time Series Analysis](https://img.shields.io/badge/analysis-time_series-blue)
![Python](https://img.shields.io/badge/python-3.8%2B-blue)
![License](https://img.shields.io/badge/license-MIT-green)

This repository contains a Python script for analyzing and forecasting energy consumption using ARIMA (AutoRegressive Integrated Moving Average) time series modeling.

---

## 🚀 Features

- 📈 Time series visualization and decomposition  
- 📊 Stationarity testing (Augmented Dickey-Fuller test)  
- 🔁 ACF/PACF plotting for ARIMA parameter selection  
- 🧠 ARIMA model fitting and forecasting  
- 📉 Model evaluation (MSE, RMSE)  
- 🔮 Forecast visualization  

---

## 📦 Requirements

- Python 3.8+
- Required packages:

```bash
pandas
numpy
matplotlib
seaborn
statsmodels
scikit-learn
````

Install dependencies with:

```bash
pip install -r requirements.txt
```

---

## 🛠️ Usage

1. Prepare your data:
   CSV file with columns: `date` (datetime) and `value` (energy consumption)
   Example format:

   ```csv
   date,value
   2020-01-01,100.5
   2020-01-02,102.3
   ...
   ```

2. Run the analysis:

```bash
python energy_consumption_analysis.py
```

---

## 🧩 Functions Overview

| Function                  | Description                                       |
| ------------------------- | ------------------------------------------------- |
| `load_data()`             | Loads time series data from CSV                   |
| `plot_time_series()`      | Visualizes the raw time series                    |
| `decompose_time_series()` | Decomposes into trend/seasonal/residual parts     |
| `test_stationarity()`     | Checks stationarity with ADF test                 |
| `plot_acf_pacf()`         | Plots autocorrelation and partial autocorrelation |
| `fit_arima_model()`       | Fits ARIMA model to data                          |
| `forecast_arima()`        | Generates future forecasts                        |
| `evaluate_arima_model()`  | Calculates MSE/RMSE metrics                       |
| `plot_forecast()`         | Visualizes forecast vs actual                     |

---

## 📊 Example Output

```python
# Sample output from main():
ADF Statistic: -3.456
p-value: 0.009
Critical Values: {'1%': -3.439, '5%': -2.865, '10%': -2.569}

Forecasted Values:
2023-01-01    105.2
2023-01-02    106.5
...

MSE: 4.32
RMSE: 2.08
```

---

## ⚙️ Customization

Modify these parameters in `main()`:

```python
# ARIMA order (p,d,q)
order = (1, 1, 1)  

# Seasonal period (for decomposition)
period = 12  

# Forecast horizon
forecast_steps = 10
```

---

## 📄 License

MIT License — see [LICENSE](LICENSE) for details.

---

## 🤝 Contributing

Contributions welcome! Please open an issue or pull request.

---

**Author**: *\[Your Name]*
**Last Updated**: *2023-11-15*
